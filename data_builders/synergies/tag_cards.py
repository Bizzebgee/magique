#!/usr/bin/env python3

# This file uses the LDA model generated by build_model.py to look at each card, and assign one or more tags to it, based on the rules text.

import sys
import gensim
from gensim import corpora
from six import iteritems
import json
from pprint import pprint
import massage_text

datapath = sys.argv[1]

model = gensim.models.ldamodel.LdaModel.load(datapath+"/synergies/cards.lda")
dictionary = corpora.Dictionary.load(datapath+"/synergies/cards.dict")

with open(datapath+'/AllCards.json') as json_data:
  cards = json.load(json_data)

with open(datapath+'/normalized_card_names.json') as json_data:
  normalized_card_names = json.load(json_data)

all_card_tags = {}

with open(datapath+'/synergies/types.json') as json_data:
  types = json.load(json_data)

# We want to do a couple of things for each card.
# 1) we want to break apart the oracle text into sentences: Each sentence is a "document"
# 2) we want to transform each document into a bag of words

for name, card in cards.items():
  # pprint(card)
  normalized_name = normalized_card_names[name]

  # skip lands and tokens!
  if("token" == card['layout']):
    continue
  if("Land" in card['types']):
    continue

  if 'text' in card:
    card_affinities = []
    card_tags = []

    # check for references to creature types.
    for type in types:
      if type in card['text']:
        card_affinities.append(type)

    sentences = massage_text.massage(card['text'], card['name'])
    for sentence in sentences:

      # classify the sentence
      vec = dictionary.doc2bow(sentence)
      tag_probs = model[vec]
      # We're going to be _very_ naive here, and just take the one tag that is most likely, and run with that.
      if(len(tag_probs) > 0):
        tag = sorted(tag_probs, key=lambda x: x[1])[-1][0]
        card_tags.append(tag)
    if(len(card_tags) > 0):
      if(name in all_card_tags.keys()):
        all_card_tags[normalized_name] += card_tags # In case we are encountering a split or flip card the second (or fifth) time
      else:
        all_card_tags[normalized_name] = card_tags

print(json.dumps(all_card_tags, indent=4, separators=(',', ': ')))
